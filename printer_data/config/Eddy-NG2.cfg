[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044506110466A1C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 105

[temperature_probe btt_eddy]
sensor_type:Generic 3950
sensor_pin:eddy:gpio26

# For all Eddy (USB/Duo/Coil)
[probe_eddy_ng btt_eddy]
sensor_type: btt_eddy
# z_offset: 3.4
# Eddy USB/Duo values below. For Eddy Coil, replace these two with mcu/bus for your setup.
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: 0 # INSERT VALUE FOR YOUR PROBE POSITION
y_offset: 19 #INSERT VALUE FOR YOUR PROBE POSITION 

[bed_mesh]
horizontal_move_z: 2 #3
speed: 250
mesh_min: 20, 23.5  
mesh_max: 280, 266 
probe_count: 14, 18
algorithm: bicubic
#scan_overshoot: 8  

[axis_twist_compensation]
speed: 200
horizontal_move_z: 10
calibrate_start_x: 20
calibrate_end_x: 280
calibrate_y: 128
calibrate_start_y: 24
calibrate_end_y: 266
calibrate_x: 150

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[save_variables]
filename: ~/printer_data/config/variables.cfg #"/home/biqu/printer_data/config/variables.cfg"



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.



# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.
gcode:
 {% set svv = printer.save_variables.variables %}
 {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
   SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
   SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
 {% endif %}



# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
[gcode_macro G28]
rename_existing: G28.1
gcode:
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
  PROBE
  SET_Z_FROM_PROBE
  {% endif %}
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z15 F600 #{cf}


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
 SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



# Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
 {% if params.Z_ADJUST %}
   SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
 {% endif %}
 {% if params.Z %}
   {% set paramList = rawparams.split() %}
   {% for i in range(paramList|length) %}
     {% if paramList[i]=="Z=0" %}
       {% set temp=paramList.pop(i) %}
       {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
       {% if paramList.append(temp) %}{% endif %}
     {% endif %}
   {% endfor %}
   {% set rawparams=paramList|join(' ') %}
   SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
 {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }



# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
   PROBE_EDDY_CURRENT_CALIBRATE CHIP=btt_eddy #PROBE_EDDY_CURRENT_CALIBRATE {rawparams}



#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
    {% set Default_Accel = printer.configfile.settings['printer'].max_accel|int %}
    {% set Default_Cruise = printer.configfile.settings['printer'].minimum_cruise_ratio|int %}
    {% set Default_Scv = printer.configfile.settings['printer'].square_corner_velocity|int %}

    SET_VELOCITY_LIMIT ACCEL=3500
    SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0.5
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=25
    
    BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
    Pucci_Park
    # SET_VELOCITY_LIMIT ACCEL={Default_Accel}
    # SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={Default_Cruise}
    # SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={Default_Scv}
    
    #SAVE_CONFIG


 


 