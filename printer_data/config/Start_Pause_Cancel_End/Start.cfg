

[gcode_macro START_PRINT]
description: This machine's Print start
variable_bed_temp: 105
variable_extruder_temp: 245
gcode:
	{% set BED_TEMP=params.BED_TEMP|default(70)|float %}
	{% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(190)|float %}
	
	# Enables part cooling fan to stop duct from melting when waiting for bed temp
    M140 S{BED_TEMP}
    M104 S190
    M106 S177
    G90  ;Set to absolute positioning
    M83
    G28  ;Home all axes if not homed
	# MOVE_TO_CLEANING_SPOT
    M109 S170
    # QUICK_CLEAN_NOZZLE
    M190 S{BED_TEMP}
    G4 P2000
      
    # G1 Y20 F3600
    G28  ;Home all axes if not homed
    G90  ;Set to absolute positioning
    G4 P500    
    BED_MESH_CLEAR  ;Clear Bed Mesh
    G4 P500
    BED_MESH_CALIBRATE  ;Bed Mesh Calibration
    G4 P500
    
    Pucci_Park
    M106 P3 S166
    SET_FAN_SPEED FAN=Chamber_Fan SPEED=0.11
    G4 P1000
    M109 S{EXTRUDER_TEMP}  ;Set extruder temperature and wait
    LINE_PURGE



[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set allow_park = client.park_at_cancel | default(false) | lower == 'true' %}
  {% set retract = client.cancel_retract | default(5.0) | abs %}
  ##### define park position #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  G91
  G1 Z15                                                                               # move z down 15mm to avoid contacting nozzle
  G90                                                                                 # set to absolute positioning
  {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max - 15 %}  # Calculate 99% position of X 
  {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max /2 %}     # calculate 50% of total Y
  G1 X{POSITION_X} Y{POSITION_Y} F6000                                                # move toolhead to the front of the K1 aux fan like stock
  TURN_OFF_HEATERS
  M106 P0 S195                                                                     # Set nozzle fan to max
  M106 P2 S240                                                                       # Set side fan to max
  M109 S200                                                                           # Cool nozzle to 200c to reduce oozing
  M107 P0                                                                             # turn toolhead fan off
  M107 P2                                                                             # turn sidefan off 
  {client.user_cancel_macro | default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  EXCLUDE_OBJECT_DEFINE RESET=1                                                       # reset bed mesh boundaries



[gcode_macro END_PRINT]
description: Cancel Print VZ-bot style
gcode:

  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set Mid_y = printer.configfile.config["stepper_y"]["position_max"]|float /2 %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set default_accel = printer.configfile.config["printer"]["max_accel"]|int %}
    
    #   Check end position to determine safe directions to move
  {% if printer.toolhead.position.x < (max_x - 10) %}
      {% set x_safe = 10.0 %}
  {% else %}
      {% set x_safe = -10.0 %}
  {% endif %}

  {% if printer.toolhead.position.y < (max_y - 12) %}
      {% set y_safe = 10.0 %}
  {% else %}
      {% set y_safe = -10.0 %}
  {% endif %}

  {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 50.0 %}
  {% else %}
      {% set z_safe = max_z - printer.toolhead.position.z %}
  {% endif %}


     #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    M220 S100
    # M204 S500
    G1 E-0.5 F3600                   ; retract
    G91                              ; relative positioning
    
    M106 P0 S195                                                                     # Set nozzle fan to max
    M106 P2 S240
    M106 P3 S253
    
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    G0 Z{z_safe} + Z10 F3600         ; move nozzle up
    G90                              ; absolute positioning
    G0 X{max_x-15} Y{Mid_y} F6000       ; park nozzle at rear
    M84
    M109 S170
    TURN_OFF_HEATERS
      {action_respond_info("Print complete, cooling that nozzle 170Â°C.")}                  # End Print Notification
    M107 P0                          ; turn off fan
    M107 P2                          #Turn off Side_Fan

    M117 Finished!                                                                          
    M204 S{default_accel}
    EXCLUDE_OBJECT_DEFINE RESET=1
    # M107 P3
  

#   [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# variable_zhop: 0
# variable_etemp: 0
# gcode:
#     # Parameters
#     {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

#     {% if printer['pause_resume'].is_paused|int == 1 %}
#         # SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=1                          ; enable filament sensor
#         #INITIAL_RGB                                                                    ; reset LCD color
#         SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
#         {% if etemp > 0 %}
#             M109 S{etemp|int}                                                        ; wait for hotend to heat back up
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
#         G91                                                                          ; relative positioning
#         M83                                                                          ; relative extruder positioning
#         {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
#             G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
#         {% else %}
#             G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
#         BASE_RESUME                                                                  ; resume print
#     {% endif %}


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        # SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

