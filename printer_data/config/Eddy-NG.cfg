[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044506110466A1C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 105

[temperature_probe btt_eddy]
sensor_type:Generic 3950
sensor_pin:eddy:gpio26

# For all Eddy (USB/Duo/Coil)
[probe_eddy_ng btt_eddy]
sensor_type: btt_eddy
# z_offset: 3.4
# Eddy USB/Duo values below. For Eddy Coil, replace these two with mcu/bus for your setup.
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: 0 # INSERT VALUE FOR YOUR PROBE POSITION
y_offset: 19 #INSERT VALUE FOR YOUR PROBE POSITION 

[bed_mesh]
horizontal_move_z: 2 #3
speed: 250
mesh_min: 20, 23.5  
mesh_max: 280, 266 
probe_count: 14, 18
algorithm: bicubic
#scan_overshoot: 8  

[axis_twist_compensation]
speed: 200
horizontal_move_z: 10
calibrate_start_x: 20
calibrate_end_x: 280
calibrate_y: 128
calibrate_start_y: 24
calibrate_end_y: 266
calibrate_x: 150

[save_variables]
filename: ~/printer_data/config/variables.cfg

[force_move]
enable_force_move: True

[gcode_macro G28]
rename_existing: G28.1
gcode:
  
  G28.1 { rawparams }
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}
   G1 Z15 F1500 #<------Added


#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
    {% set Default_Accel = printer.configfile.settings['printer'].max_accel|int %}
    {% set Default_Cruise = printer.configfile.settings['printer'].minimum_cruise_ratio|int %}
    {% set Default_Scv = printer.configfile.settings['printer'].square_corner_velocity|int %}

    SET_VELOCITY_LIMIT ACCEL=3500
    SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0.5
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=25
    
    BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
    Pucci_Park
#############################################################################################

# Get the full macro pack here: https://github.com/3DPrintDemon/Demon_Klipper_Essentials_Unified

#############################################################################################

[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.0
gcode:
  {% set svv = printer.save_variables.variables %} 
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={svv.nvm_offset|default(0.0)|float}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=backup_offset VALUE={svv.nvm_offset|default(0.0)|float}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %} #



[gcode_macro EDDY_READ_RT_OFFSET]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set restored_RTOS = printer["gcode_macro SET_GCODE_OFFSET"].restored %}
  {% set rt_offset = printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset|float %}
  {% set backup_rt_offset = printer["gcode_macro SET_GCODE_OFFSET"].backup_offset|float %}
    RESPOND TYPE=COMMAND MSG="Eddy macro backup_runtime offset: {backup_rt_offset|float}"
    RESPOND TYPE=COMMAND MSG="Eddy macro runtime offset: {rt_offset|float}"
    RESPOND TYPE=COMMAND MSG="Eddy saved variables value: {svv.nvm_offset|float}"
    RESPOND TYPE=COMMAND MSG="Eddy restore condition: {restored_RTOS}"
 


[gcode_macro SET_Z_FROM_PROBE]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set backup_rt_offset = printer["gcode_macro SET_GCODE_OFFSET"].backup_offset|float %}
  {% set restored_RTOS = printer["gcode_macro SET_GCODE_OFFSET"].restored %}

  {% if restored_RTOS != True %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={backup_rt_offset}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}
    _SET_Z_COMMIT

    

[gcode_macro _SET_Z_COMMIT]
gcode:
  {% set cf = printer.configfile.settings %}

  {% if not printer["gcode_macro _MESH_BUILDER_VARIABLES"] %}
     _VERBOSE_OFFSET
  {% else %}
    {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    {% if start_vars.eddy_verbose == True %}
      _VERBOSE_OFFSET
    {% endif %}
  {% endif %}
    
    SET_GCODE_OFFSET_ORIG Z={(printer.probe.last_z_result - cf['probe_eddy_ng btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)}
    G90
    #G1 Z{cf.axis_twist_compensation.horizontal_move_z} #{cf.safe_z_home.z_hop} # Uncomment this section below if you are using this file as a stand-alone cfg & NOT with 3DPrintDemon Demon Klipper Essentials Unified macro pack



[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



[gcode_macro _VERBOSE_OFFSET]
gcode:
  {% set cf = printer.configfile.settings %}
  {% set rt_offset = printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset|float %}

    RESPOND TYPE=COMMAND MSG="Eddy Probe: Probe reading was {("%.4fmm" % (printer.probe.last_z_result|float))}, your Eddy probe height is set at {("%.4fmm" % (cf['probe_eddy_ng btt_eddy'].z_offset|float))}"
    RESPOND TYPE=COMMAND MSG="Eddy Probe: Auto calculated offset is {("%.4fmm" % ((printer.probe.last_z_result - cf['probe_eddy_ng btt_eddy'].z_offset)|float))}"
  {% if rt_offset != 0.0|float %}
    RESPOND TYPE=COMMAND MSG="Eddy Probe: Your user defined runtime offset is {("%.4fmm" % (printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset|float))}"
  {% else %}
    RESPOND TYPE=COMMAND MSG="Eddy Probe: Your runtime offset is 0.0mm"
  {% endif %}
    RESPOND TYPE=COMMAND MSG="Eddy Probe: Your Gcode offset should equal {("%.4fmm" % ((printer.probe.last_z_result - cf['probe_eddy_ng btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|float))}mm"



[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False
variable_backup_offset: 0.0
variable_runtime_offset: 0.0
gcode:
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={(printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float)}
  {% endif %}
  {% if params.Z %}
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
      {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
      {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0.0
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=False
  {% endif %}
   SET_GCODE_OFFSET_ORIG { rawparams }

  

[gcode_macro EDDY_RESET_RUNTIME_OFFSET]
description: Reset any stored runtime offset you might have saved to the Eddy Probe.
gcode:
  {% if printer.print_stats.state not in ["printing", "paused", "busy"] %}
    _EDDY_PROBE_RTOS_RESET_PROMPT
  {% else %}
    RESPOND TYPE=command MSG="Reset denied, the printer status is not Standby!"
  {% endif %}

[gcode_macro _EDDY_PROBE_RTOS_RESET_PROMPT]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin EDDY PROBE"
    RESPOND TYPE=command MSG="action:prompt_text Are you sure you want to reset all stored & set offset for your Eddy Probe?"
    RESPOND TYPE=command MSG="action:prompt_text Your manually stored offset will be LOST & your current Z offset will be set to 0.00!"
    RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button RESET!|_EDDY_RESET_OFFSET|error"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _EDDY_RESET_OFFSET]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set rt_offset = printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset|float %}

    RESPOND TYPE=command MSG="action:prompt_end"
    RESPOND TYPE=COMMAND MSG="Eddy Probe: Runtime offset now reset to 0.0mm!"
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0.0
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=backup_offset VALUE=0.0
    SAVE_VARIABLE VARIABLE=nvm_offset VALUE=0.0
    SET_GCODE_OFFSET Z=0.0
    _EDDY_PROBE_POST_RESET_PROMPT

[gcode_macro _EDDY_PROBE_POST_RESET_PROMPT]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin EDDY PROBE"
    RESPOND TYPE=command MSG="action:prompt_text Your manually stored offset has been RESET!!"
    RESPOND TYPE=command MSG="action:prompt_footer_button GOT IT!|RESPOND TYPE=command MSG=action:prompt_end|error"
    RESPOND TYPE=command MSG="action:prompt_show"



# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
    BED_MESH_CLEAR
    G28 X Y
    G90 # Abs positioning
    G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
    PROBE_EDDY_CURRENT_CALIBRATE CHIP=btt_eddy



# [z_tilt_adjust]
# # the rest of your z_tilt_adjust section

# [gcode_macro Z_TILT_ADJUST]
# rename_existing: _Z_TILT_ADJUST
# gcode:
#     SAVE_GCODE_STATE NAME=STATE_Z_TILT
#     BED_MESH_CLEAR
#     {% if not printer.z_tilt.applied %}
#     _Z_TILT_ADJUST horizontal_move_z=8 retry_tolerance=1
#     {% endif %}
#     _Z_TILT_ADJUST horizontal_move_z=2
#     RESTORE_GCODE_STATE NAME=STATE_Z_TILT
