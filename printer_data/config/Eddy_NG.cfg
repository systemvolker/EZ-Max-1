[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044506110466A1C-if00
#/dev/serial/by-id/usb-Klipper_rp2040_5044506110466A1C-if00
restart_method:command

[probe_eddy_ng btt_eddy]
sensor_type: btt_eddy
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: 0 # INSERT VALUE FOR YOUR PROBE POSITION
y_offset: 19 # INSERT VALUE FOR YOUR PROBE POSITION 
# tap_target_z: -0.7

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 105

[temperature_sensor btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26


[bed_mesh]
horizontal_move_z: 2 #3
speed: 200
mesh_min: 20, 23.5  
mesh_max: 280, 266 
probe_count: 7, 8
algorithm: bicubic
bicubic_tension: 0.5
adaptive_margin: 5
mesh_pps: 3,3
fade_start: 1
fade_end: 10
fade_target: 0
#scan_overshoot: 8  

[axis_twist_compensation]
speed: 200
horizontal_move_z: 10
calibrate_start_x: 20
calibrate_end_x: 280
calibrate_y: 128
calibrate_start_y: 24
calibrate_end_y: 266
calibrate_x: 150


[gcode_macro EDDY_NG_CALIBRATE]
description: Calibration for Eddy NG - Homes axes, heats bed with soak, heats nozzle, then sets up probe
gcode:
    # Parameters
    {% set BED_TEMP = params.BED_TEMP|default(50)|int %}
    
    # Home X and Y axes
    HOME_X_Y_ONLY_MOVE_CENTER_AFTER
    
    # Heat the bed to target temperature (minimum 60C) and wait
    {% set FINAL_BED_TEMP = [BED_TEMP, 55]|max %}
    M117 Heating bed to {FINAL_BED_TEMP}C...
    M190 S{FINAL_BED_TEMP}  # Set bed temperature and wait
    
    # Heat soak for 2 minutes
    M117 Bed heat soak for 1 minute...
    G4 P60000  # Pause for 120000ms (1 minute)
    
    Heat nozzle to 150C and wait
    M117 Heating nozzle to 150C...
    M109 S150  # Set nozzle temperature and wait
    
    M117 Running Eddy NG setup...
    PROBE_EDDY_NG_SETUP
    
    M117 Calibration complete

[force_move]
enable_force_move: True


#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_PUC
gcode:
    {% set Default_Accel = printer.configfile.settings['printer'].max_accel|int %}
    {% set Default_Cruise = printer.configfile.settings['printer'].minimum_cruise_ratio|int %}
    {% set Default_Scv = printer.configfile.settings['printer'].square_corner_velocity|int %}

    SET_VELOCITY_LIMIT ACCEL=3500
    SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0.5
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=25
    
    EDDYNG_BED_MESH_EXPERIMENTAL
    SET_VELOCITY_LIMIT ACCEL={Default_Accel}
    SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0.2
    # Center_Park

# # Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
# [delayed_gcode RESTORE_PROBE_OFFSET]
# initial_duration: 1.
# gcode:
#  {% set svv = printer.save_variables.variables %}
#  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
#  {% endif %}



# # Uncomment this if you are using Eddy as the probe AND the homing endstop
# # Take note of the lines that should only be used if you have a KNOMI installed.
# [gcode_macro G28]
# rename_existing: G28.1
# gcode:
#   #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
#   G28.1 {rawparams}
#   {% if not rawparams or (rawparams and 'Z' in rawparams) %}
#   PROBE
#   SET_Z_FROM_PROBE
#   {% endif %}

#   # G1 Z15 F600
#   #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg



# # Uncomment this if you are using Eddy as the probe AND the homing endstop
# [gcode_macro SET_Z_FROM_PROBE]
# gcode:
#     {% set cf = printer.configfile.settings %}
#     SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
#     G90
#      #{cf}


# # Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
# [gcode_macro Z_OFFSET_APPLY_PROBE]
# rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
# gcode:
#  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



# # Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
# [gcode_macro SET_GCODE_OFFSET]
# rename_existing: SET_GCODE_OFFSET_ORIG
# variable_restored: False  # Mark whether the var has been restored from NVM
# variable_runtime_offset: 0
# gcode:
#  {% if params.Z_ADJUST %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
#  {% endif %}
#  {% if params.Z %}
#    {% set paramList = rawparams.split() %}
#    {% for i in range(paramList|length) %}
#      {% if paramList[i]=="Z=0" %}
#        {% set temp=paramList.pop(i) %}
#        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
#        {% if paramList.append(temp) %}{% endif %}
#      {% endif %}
#    {% endfor %}
#    {% set rawparams=paramList|join(' ') %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
#  {% endif %}
#   SET_GCODE_OFFSET_ORIG { rawparams }

  

